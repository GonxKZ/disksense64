#include \"libs/utils/utils.h\"\n#include <cassert>\n#include <iostream>\n\nint test_file_utils() {\n    // Test path separator\n    char separator = FileUtils::get_path_separator();\n    \n#ifdef _WIN32\n    assert(separator == '\\\\');\n#else\n    assert(separator == '/');\n#endif\n    \n    // Test path joining\n    std::string path1 = \"home\";\n    std::string path2 = \"user\";\n    std::string joined = FileUtils::join_paths(path1, path2);\n    \n#ifdef _WIN32\n    assert(joined == \"home\\\\user\");\n#else\n    assert(joined == \"home/user\");\n#endif\n    \n    // Test file extension\n    std::string filename = \"test.txt\";\n    std::string ext = FileUtils::get_file_extension(filename);\n    assert(ext == \".txt\");\n    \n    std::cout << \"FileUtils tests passed!\" << std::endl;\n    return 0;\n}\n\nint test_string_utils() {\n    // Test case insensitive comparison\n    std::string str1 = \"Hello\";\n    std::string str2 = \"HELLO\";\n    assert(StringUtils::iequals(str1, str2));\n    \n    // Test to lower\n    std::string upper = \"HELLO WORLD\";\n    std::string lower = StringUtils::to_lower(upper);\n    assert(lower == \"hello world\");\n    \n    // Test splitting\n    std::string csv = \"a,b,c\";\n    auto parts = StringUtils::split(csv, ',');\n    assert(parts.size() == 3);\n    assert(parts[0] == \"a\");\n    assert(parts[1] == \"b\");\n    assert(parts[2] == \"c\");\n    \n    std::cout << \"StringUtils tests passed!\" << std::endl;\n    return 0;\n}\n\nint test_time_utils() {\n    // Test current time\n    uint64_t time1 = TimeUtils::get_current_time_ms();\n    uint64_t time2 = TimeUtils::get_current_time_ms();\n    \n    // Should be within a reasonable range\n    assert(time2 >= time1);\n    assert(time2 - time1 < 1000); // Less than 1 second difference\n    \n    std::cout << \"TimeUtils tests passed!\" << std::endl;\n    return 0;\n}\n\nint test_system_utils() {\n    // Test CPU cores\n    unsigned int cores = SystemUtils::get_cpu_cores();\n    assert(cores > 0);\n    \n    // Test memory\n    uint64_t total_memory = SystemUtils::get_total_memory();\n    uint64_t available_memory = SystemUtils::get_available_memory();\n    assert(total_memory > 0);\n    assert(available_memory > 0);\n    assert(available_memory <= total_memory);\n    \n    // Test page size\n    size_t page_size = SystemUtils::get_page_size();\n    assert(page_size > 0);\n    \n    std::cout << \"SystemUtils tests passed!\" << std::endl;\n    return 0;\n}\n\nint main() {\n    std::cout << \"Running cross-platform utility tests...\" << std::endl;\n    \n    int result = 0;\n    result |= test_file_utils();\n    result |= test_string_utils();\n    result |= test_time_utils();\n    result |= test_system_utils();\n    \n    if (result == 0) {\n        std::cout << \"All tests passed!\" << std::endl;\n    } else {\n        std::cout << \"Some tests failed!\" << std::endl;\n    }\n    \n    return result;\n}