name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    name: Build Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake g++ zip libgl1-mesa-dev libxkbcommon-x11-0 libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender1 libxrandr-dev libfontconfig1-dev
      - name: Install aqtinstall
        run: python -m pip install --upgrade pip aqtinstall
      - name: Install Qt (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          python -m aqt install-qt --outputdir $HOME/Qt linux desktop 6.6.2 gcc_64 -m qtbase qtsvg qttools qtdeclarative qtshadertools qtimageformats
          echo "QT_DIR=$HOME/Qt/6.6.2/gcc_64" >> $GITHUB_ENV
      - name: Install Qt (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        run: |
          python -m aqt install-qt -O $env:USERPROFILE\Qt windows desktop 6.6.2 win64_msvc2019_64 -m qtbase qtsvg qttools qtdeclarative qtshadertools qtimageformats
          echo "QT_DIR=$env:USERPROFILE\Qt\6.6.2\msvc2019_64" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Generate translations (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          export PATH="$QT_DIR/bin:$PATH"
          bash scripts/generate_translations.sh
      - name: Generate translations (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        run: |
          $env:Path = "$env:QT_DIR\bin;$env:Path"
          & lupdate -no-obsolete -locations none -ts translations/disksense_en.ts apps/DiskSense.Gui/*.cpp apps/DiskSense.Gui/ui/*.cpp apps/DiskSense.Gui/components/*.cpp core/*/*.cpp platform/*.cpp
          & lupdate -no-obsolete -locations none -ts translations/disksense_es.ts apps/DiskSense.Gui/*.cpp apps/DiskSense.Gui/ui/*.cpp apps/DiskSense.Gui/components/*.cpp core/*/*.cpp platform/*.cpp
          & lrelease translations/disksense_en.ts -qm translations/disksense_en.qm
          & lrelease translations/disksense_es.ts -qm translations/disksense_es.qm
      - name: Configure (Release)
        env:
          CMAKE_PREFIX_PATH: ${{ env.QT_DIR }}
        run: cmake -S . -B build -G Ninja -DENABLE_GUI=ON -DUSE_QT_GUI=ON -DENABLE_TESTING=ON -DMINIMAL_UNIT_TESTS=ON -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build --parallel
      - name: Test
        run: ctest --test-dir build --output-on-failure
      - name: Package (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          mkdir -p artifacts/linux
          cp -r build/bin artifacts/linux/
          cp -r build/lib artifacts/linux/
          cp -r translations artifacts/linux/ || true
          cd artifacts && tar czf disksense64-linux-${{ github.ref_name }}.tar.gz linux
      - name: Package (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $bin = "build\bin"
          # Deploy Qt runtime for GUI
          & "$env:QT_DIR\bin\windeployqt.exe" "$bin\DiskSense.Gui.exe" --release --compiler-runtime
          mkdir artifacts\windows
          Copy-Item $bin -Destination artifacts\windows\bin -Recurse
          if (Test-Path translations) { Copy-Item translations -Destination artifacts\windows\translations -Recurse }
          Compress-Archive -Path artifacts\windows\* -DestinationPath artifacts\disksense64-windows-${{ github.ref_name }}.zip
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: disksense64-${{ matrix.os }}-${{ github.ref_name }}
          path: |
            artifacts/*.tar.gz
            artifacts/*.zip

  publish:
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: disksense64-*
          merge-multiple: true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

